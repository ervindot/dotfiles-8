# Copied from DistroTube (dwt1 on gitlab)
#
# $Format: "#PRCS LYNX_VERSION \"$ProjectVersion$\""$
#PRCS LYNX_VERSION "2.8.9dev.16"
#
# $Format: "#PRCS LYNX_DATE \"$ProjectDate$\""$
#PRCS LYNX_DATE "Tue, 11 Jul 2017 04:45:14 -0400"
#
# Definition pairs (configuration settings) are of the form
#	VARIABLE:DEFINITION
# NO spaces are allowed around the colon ":" between the pair items.
#
#  If you do not have write access to /usr/local/lib you may change
#  the default location of this file in the userdefs.h file and recompile,
#  or specify its location on the command line with the "-cfg"
#  command line option.
#
# Items may be commented out by putting a '#' as the FIRST char of the line
# (Any line beginning with punctuation is ignored).  Leading blanks on each
# line are ignored; trailing blanks may be significant depending on the option.
# In most cases, a definition can be overridden by another later in the
# file, or in an including configuration file.  You can see the effect of
# definitions (and redefinitions) in the trace file Lynx.log by using the
# "-trace" and "-trace-mask" options, e.g.,
#	lynx -trace -trace-mask=8
# As a documentation aid, the default values for each setting are shown
# commented-out.  By convention, these default value comments have no space
# after the "#", e.g.,
#	#HTTP_PROTOCOL:1.0
# An HTML'ized description of all settings (based on comments in this file,
# with alphabetical table of settings and with table of settings by category)
# is available at http://lynx.invisible-island.net/release/breakout/lynx_help/cattoc.html
#
### The conversion is done via the scripts/cfg2html.pl script.
### Several directives beginning with '.' are used for this purpose.
.h1 Auxiliary Facilities
# These settings control the auxiliary navigating facilities of lynx, e.g.,
# jumpfiles, bookmarks, default URLs.
.h2 INCLUDE
# Starting with Lynx 2.8.1, the lynx.cfg file has a crude "include"
# facility.  This means that you can take advantage of the global lynx.cfg
# while also supplying your own tweaks.
#
# You can use a command-line argument (-cfg /where/is/lynx.cfg) or an
# environment variable (LYNX_CFG=/where/is/lynx.cfg).
# For instance, put in your .profile or .login:
#
#   LYNX_CFG=~/lynx.cfg; export LYNX_CFG   # in .profile for sh/ksh/bash/etc.
#   setenv LYNX_CFG ~/lynx.cfg             # in .login for [t]csh
#
# Then in ~/lynx.cfg:
#
#   INCLUDE:/usr/local/lib/lynx.cfg
#           ^^^^^^^^^^^^^^^^^^^^^^^ or whatever is appropriate on your system
# and now your own tweaks.  If you omit the directory name, e.g.,
#
#   INCLUDE:lynx.cfg
#
# then lynx first checks if it is in any of the directories listed in the
# environment variable LYNX_CFG_PATH, then tries the directory of the default
# config-file.
#
# You can also suppress all but specific settings that will be read from
# included files.  This allows sysadmins to provide users the ability to
# customize lynx with options that normally do not affect security, such as
# COLOR, VIEWER, KEYMAP.
#
# The syntax is
#
#   INCLUDE:filename for <space-separated-list-of-allowed-settings>
#
# sample:
.ex
#INCLUDE:~/lynx.cfg for COLOR VIEWER KEYMAP
# only one space character should surround the word 'for'.  On Unix systems ':'
# is also accepted as separator.  In that case, the example can be written as
.ex
#INCLUDE:~/lynx.cfg:COLOR VIEWER KEYMAP
# In the example, only the settings COLOR, VIEWER and KEYMAP are accepted by
# lynx.  Other settings are ignored.  Note:  INCLUDE is also treated as a
# setting, so to allow an included file to include other files, put INCLUDE in
# the list of allowed settings.
#
# If you allow an included file to include other files, and if a list of
# allowed settings is specified for that file with the INCLUDE command, nested
# files are only allowed to include the list of settings that is the set AND of
# settings allowed for the included file and settings allowed by nested INCLUDE
# commands.  In short, there is no security hole introduced by including a
# user-defined configuration file if the original list of allowed settings is
# secure.
.h2 STARTFILE
# STARTFILE is the default starting URL if none is specified
#   on the command line or via a WWW_HOME environment variable;
#   Lynx will refuse to start without a starting URL of some kind.
# STARTFILE can be remote, e.g. http://www.w3.org/default.html ,
#                or local, e.g. file://localhost/PATH_TO/FILENAME ,
#           where PATH_TO is replaced with the complete path to FILENAME
#           using Unix shell syntax and including the device on VMS.
#
# Normally we expect you will connect to a remote site, e.g., the Lynx starting
# site:
#STARTFILE:http://lynx.invisible-island.net/
#
# As an alternative, you may want to use a local URL.  A good choice for this is
# the user's home directory:
.ex
#STARTFILE:file://localhost/~/
STARTFILE:file://localhost/usr/share/doc/lynx/lynx_help/about_lynx.html.gz
#
# Your choice of STARTFILE should reflect your site's needs, and be a URL that
# you can connect to reliably.  Otherwise users will become confused and think
# that they cannot run Lynx.
.h2 HELPFILE
# HELPFILE must be defined as a URL and must have a
# complete path if local:
# file://localhost/PATH_TO/lynx_help/lynx_help_main.html
#   Replace PATH_TO with the path to the lynx_help subdirectory
#   for this distribution (use SHELL syntax including the device
#   on VMS systems).
# The default HELPFILE is:
.url http://lynx.invisible-island.net/lynx_help/lynx_help_main.html
#   This should be changed to the local path.
# This definition will be overridden if the "LYNX_HELPFILE" environment
# variable has been set.
#
#HELPFILE:http://lynx.invisible-island.net/lynx_help/lynx_help_main.html
.ex
##HELPFILE:file://localhost/PATH_TO/lynx_help/lynx_help_main.html
HELPFILE:file://localhost/usr/share/doc/lynx-common/lynx_help/lynx_help_main.html.gz
.h2 DEFAULT_INDEX_FILE
# DEFAULT_INDEX_FILE is the default file retrieved when the
# user presses the 'I' key when viewing any document.
# An index to your CWIS can be placed here or a document containing
# pointers to lots of interesting places on the web.
#
DEFAULT_INDEX_FILE:http://scout.wisc.edu/
.h1 Interaction
.h2 GOTOBUFFER
# Set GOTOBUFFER to TRUE if you want to have the previous goto URL,
# if any, offered for reuse or editing when using the 'g'oto command.
# The default is defined in userdefs.h.  If left FALSE, the circular
# buffer of previously entered goto URLs can still be invoked via the
# Up-Arrow or Down-Arrow keys after entering the 'g'oto command.
#
#GOTOBUFFER:FALSE
.h2 JUMP_PROMPT
# JUMP_PROMPT is the default statusline prompt for selecting a jumps file
# shortcut.  (see below).
# You can change the prompt here from that defined in userdefs.h.  Any
# trailing white space will be trimmed, and a single space is added by Lynx
# following the last non-white character.  You must set the default prompt
# before setting the default jumps file (below).  If a default jumps file
# was set via userdefs.h, and you change the prompt here, you must set the
# default jumps file again (below) for the change to be implemented.
#
#JUMP_PROMPT:Jump to (use '?' for list):
.h1 Auxiliary Facilities
.h2 JUMPFILE
# JUMPFILE is the local file checked for short-cut names for URLs when
# the user presses the 'j' (JUMP) key.  The file contains an HTML
# definition list (DL).  The definition titles (DT) are used as
# short-cut name; the definition data (DD) are URLs.
#
# There is an example jumps file in the samples subdirectory.
#
# After pressing 'j', the user will be prompted to enter a short-cut
# name for an URL, which Lynx will then follow in a similar manner to
# 'g'oto; alternatively, s/he can enter '?' to view the full JUMPFILE
# list of short-cuts with associated URLs.
#
# If the URL contains one or more "%s" markers, Lynx will prompt the user
# for text to fill in for each marker.  If no text is given, the jump is
# cancelled.
#
# If not defined here or in userdefs.h, the JUMP command will invoke the
# NO_JUMPFILE statusline message (see LYMessages_en.h ).
#
# To allow '?' to work, include in the JUMPFILE
# a short-cut to the JUMPFILE itself, e.g.
# <dt>?<dd><a href="file://localhost/path/jumps.html">This Shortcut List</a>
#
# On VMS, use Unix SHELL syntax (including a lead slash) to define it.
#
# Alternate jumps files can be defined and mapped to keys here.  If the
# keys have already been mapped, then those mappings will be replaced,
# but you should leave at least one key mapped to the default jumps
# file.  You optionally may include a statusline prompt string for the
# mapping.  You must map upper and lowercase keys separately (beware of
# mappings to keys which the user can further remap via the 'o'ptions
# menu).  The format is:
#
#	JUMPFILE:path:key[:prompt]
#
# where path should begin with a '/' (i.e., not include file://localhost).
# Any white space following a prompt string will be trimmed, and a single
# space will be added by Lynx.
#
# In the following line, include the actual full local path to JUMPFILE,
# but do not include 'file://localhost' in the line.
#JUMPFILE:/FULL_LOCAL_PATH/jumps.html
.ex
#JUMPFILE:/Lynx_Dir/ips.html:i:IP or Interest group (? for list):
.h2 JUMPBUFFER
# Set JUMPBUFFER to TRUE if you want to have the previous jump target,
# if any, offered for reuse or editing when using the 'J'ump command.
# The default is defined in userdefs.h.  If left FALSE, the circular
# buffer of previously entered targets (shortcuts) can still be invoked
# via the Up-Arrow or Down-Arrow keys after entering the 'J'ump command.
# If multiple jumps files are installed, the recalls of shortcuts will
# be specific to each file.  If Lynx was built with PERMIT_GOTO_FROM_JUMP
# defined, any random URLs used instead of shortcuts will be stored in the
# goto URL buffer, not in the shortcuts buffer(s), and the single character
# ':' can be used as a target to invoke the goto URL buffer (as if 'g'oto
# followed by Up-Arrow had been entered).
#
#JUMPBUFFER:FALSE
.h1 Internal Behavior
.h2 SAVE_SPACE
# If SAVE_SPACE is defined, it will be used as a path prefix for the
# suggested filename in "Save to Disk" operations from the 'p'rint or
# 'd'ownload menus.  On VMS, you can use either VMS (e.g., "SYS$LOGIN:")
# or Unix syntax (including '~' for the HOME directory).  On Unix, you
# must use Unix syntax.  If the symbol is not defined, or is zero-length
# (""), no prefix will be used, and only a filename for saving in the
# current default directory will be suggested.
# This definition will be overridden if a "LYNX_SAVE_SPACE" environment
# variable has been set on Unix, or logical has been defined on VMS.
#
#SAVE_SPACE:~/foo/
.h2 REUSE_TEMPFILES
# Lynx uses temporary files for (among other purposes) the content of
# various user interface pages.  REUSE_TEMPFILES changes the behavior
# for some of these temp files, among them pages shown for HISTORY,
# VLINKS, OPTIONS, INFO, PRINT, DOWNLOAD commands.
# If set to TRUE, the same file can be used multiple times for the same
# purpose.  If set to FALSE, a new filename is generated each time before
# rewriting such a page.  With TRUE, repeated invocation of these commands
# is less likely to push previous documents out of the cache of rendered
# texts (see also DEFAULT_CACHE_SIZE).  This is especially useful with
# intermittent (dialup) network connections, when it is desirable to
# continue browsing through the cached documents after disconnecting.
# With the default setting of FALSE, there can be more than one incarnation
# of e.g. the VLINKS page cached in memory (but still only the most recently
# generated one is kept as a file), resulting in sometimes less surprising
# behaviour when returning to such a page via HISTORY or PREV_DOC functions
# (most users will not encounter and notice this difference).
#
#REUSE_TEMPFILES:FALSE
.h2 LYNX_HOST_NAME
# If LYNX_HOST_NAME is defined here or in userdefs.h, it will be
# treated as an alias for the local host name in checks for URLs on
# the local host (e.g., when the -localhost switch is set), and this
# host name, "localhost", and HTHostName (the fully qualified domain
# name of the system on which Lynx is running) will all be passed as
# local.  A different definition here will override that in userdefs.h.
#
#LYNX_HOST_NAME:www.cc.ukans.edu
.h2 LOCALHOST_ALIAS
# localhost aliases
# Any LOCALHOST_ALIAS definitions also will be accepted as local when
# the -localhost switch is set.  These need not actually be local, i.e.,
# in contrast to LYNX_HOST_NAME, you can define them to trusted hosts at
# other Internet sites.
#
.ex 2
#LOCALHOST_ALIAS:gopher.server.domain
#LOCALHOST_ALIAS:news.server.domain
.h2 LOCAL_DOMAIN
# LOCAL_DOMAIN is used for a tail match with the ut_host element of
# the utmp or utmpx structure on systems with utmp capabilities, to
# determine if a user is local to your campus or organization when
# handling -restrictions=inside_foo or outside_foo settings for ftp,
# news, telnet/tn3270 and rlogin URLs.  An "inside" user is assumed
# if your system does not have utmp capabilities.  CHANGE THIS here
# if it was not changed in userdefs.h at compilation time.
#
#LOCAL_DOMAIN:ukans.edu
.h1 Session support
.h2 AUTO_SESSION
# If AUTO_SESSION is TRUE lynx will save/restore useful information about
# your browsing history when closing/starting current lynx session if
# no command-line session switches override this setting.
# This setting is useful only if SESSION_FILE is defined here or in the user's
# .lynxrc file.
#
#AUTO_SESSION:FALSE
.h2 SESSION_FILE
# SESSION_FILE defines the file name where lynx will store user sessions.
# This setting is used only when AUTO_SESSION is true.
# Note: the default setting will store/resume each session in a different
# folder under same file name (if that is allowed by operating system)
# when lynx is invoked from different directories.
# (The current working directory may be changed inside lynx)
#
# If you want to use the same session file wherever you invoke Lynx,
# enter the full path below, eg '/home/<username>/.lynx_session'.
#
# If you do not want this feature, leave the setting commented.
# Users can still customize SESSION_FILE and AUTO_SESSION via
# their .lynxrc file.
#
#SESSION_FILE:lynx_session
.h2 SESSION_LIMIT
# SESSION_LIMIT defines maximum number of:  searched strings, goto URLs,
# visited links and history entries which will be saved in session file.  The
# minimum allowed is 1, the maximum is 10000.
#
# For instance, if SESSION_LIMIT is 250, a per-session limit of 250 entries of
# searched strings, goto URLs, visited links and history entries will be saved
# in the session file.
#
# There is no fixed limit on the number of entries which can be restored;
# It is limited only by available memory.
#
#SESSION_LIMIT:250
.h1 Character Sets
.h2 CHARACTER_SET
# CHARACTER_SET defines the display character set, i.e., assumed to be
# installed on the user's terminal.  It determines which characters or strings
# will be used to represent 8-bit character entities within HTML.  New
# character sets may be defined as explained in the README files of the
# src/chrtrans directory in the Lynx source code distribution.  For Asian (CJK)
# character sets, it also determines how Kanji code will be handled.  The
# default is defined in userdefs.h and can be changed here or via the
# 'o'ptions menu.  The 'o'ptions menu setting will be stored in the user's RC
# file whenever those settings are saved, and thereafter will be used as the
# default.  For Lynx a "character set" has two names:  a MIME name (for
# recognizing properly labeled charset parameters in HTTP headers etc.), and a
# human-readable string for the 'O'ptions Menu (so you may find info about
# language or group of languages besides MIME name).  Not all 'human-readable'
# names correspond to exactly one valid MIME charset (example is "Chinese");
# in that case an appropriate valid (and more specific) MIME name should be
# used where required.  Well-known synonyms are also processed in the code.
#
# Raw (CJK) mode
#
# Lynx normally translates characters from a document's charset to display
# charset, using ASSUME_CHARSET value (see below) if the document's charset
# is not specified explicitly.  Raw (CJK) mode is OFF for this case.
# When the document charset is specified explicitly, that charset
# overrides any assumption like ASSUME_CHARSET or raw (CJK) mode.
#
# For the Asian (CJK) display character sets, the corresponding charset is
# assumed in documents, i.e., raw (CJK) mode is ON by default.  In raw CJK
# mode, 8-bit characters are not reverse translated in relation to the entity
# conversion arrays, i.e., they are assumed to be appropriate for the display
# character set.  The mode should be toggled OFF when an Asian (CJK) display
# character set is selected but the document is not CJK and its charset not
# specified explicitly.
#
# Raw (CJK) mode may be toggled by user via '@' (LYK_RAW_TOGGLE) key,
# the -raw command line switch or from the 'o'ptions menu.
#
# Raw (CJK) mode effectively changes the charset assumption about unlabeled
# documents.  You can toggle raw mode ON if you believe the document has a
# charset which does correspond to your Display Character Set.  On the other
# hand, if you set ASSUME_CHARSET the same as Display Character Set you get raw
# mode ON by default (but you get assume_charset=iso-8859-1 if you try raw mode
# OFF after it).
#
# Note that "raw" does not mean that every byte will be passed to the screen.
# HTML character entities may get expanded and translated, inappropriate
# control characters filtered out, etc.  There is a "Transparent" pseudo
# character set for more "rawness".
#
# Since Lynx now supports a wide range of platforms it may be useful to note
# the cpXXX codepages used by IBM PC compatible computers, and windows-xxxx
# used by native MS-Windows apps.  We also note that cpXXX pages rarely are
# found on Internet, but are mostly for local needs on DOS.
#
# Recognized character sets include:
#
.nf
#    string for 'O'ptions Menu          MIME name
#    ===========================        =========
#    7 bit approximations (US-ASCII)    us-ascii
#    Western (ISO-8859-1)               iso-8859-1
#    Western (ISO-8859-15)              iso-8859-15
#    Western (cp850)                    cp850
#    Western (windows-1252)             windows-1252
#    IBM PC US codepage (cp437)         cp437
#    DEC Multinational                  dec-mcs
#    Macintosh (8 bit)                  macintosh
#    NeXT character set                 next
#    HP Roman8                          hp-roman8
#    Chinese                            euc-cn
#    Japanese (EUC-JP)                  euc-jp
#    Japanese (Shift_JIS)               shift_jis
#    Korean                             euc-kr
#    Taipei (Big5)                      big5
#    Vietnamese (VISCII)                viscii
#    Eastern European (ISO-8859-2)      iso-8859-2
#    Eastern European (cp852)           cp852
#    Eastern European (windows-1250)    windows-1250
#    Latin 3 (ISO-8859-3)               iso-8859-3
#    Latin 4 (ISO-8859-4)               iso-8859-4
#    Baltic Rim (ISO-8859-13)		iso-8859-13
#    Baltic Rim (cp775)                 cp775
#    Baltic Rim (windows-1257)          windows-1257
#    Celtic (ISO-8859-14)		iso-8859-14
#    Cyrillic (ISO-8859-5)              iso-8859-5
#    Cyrillic (cp866)                   cp866
#    Cyrillic (windows-1251)            windows-1251
#    Cyrillic (KOI8-R)                  koi8-r
#    Arabic (ISO-8859-6)                iso-8859-6
#    Arabic (cp864)                     cp864
#    Arabic (windows-1256)              windows-1256
#    Greek (ISO-8859-7)                 iso-8859-7
#    Greek (cp737)                      cp737
#    Greek2 (cp869)                     cp869
#    Greek (windows-1253)               windows-1253
#    Hebrew (ISO-8859-8)                iso-8859-8
#    Hebrew (cp862)                     cp862
#    Hebrew (windows-1255)              windows-1255
#    Turkish (ISO-8859-9)               iso-8859-9
#    North European (ISO-8859-10)	iso-8859-10
#    Ukrainian Cyrillic (cp866u)        cp866u
#    Ukrainian Cyrillic (KOI8-U)        koi8-u
#    UNICODE (UTF-8)                    utf-8
#    RFC 1345 w/o Intro                 mnemonic+ascii+0
#    RFC 1345 Mnemonic                  mnemonic
#    Transparent                        x-transparent
.fi
#
# The value should be the MIME name of a character set recognized by
# Lynx (case insensitive).
# Find RFC 1345 at
.url http://tools.ietf.org/html/rfc1345
#
CHARACTER_SET:iso-8859-1
.h2 LOCALE_CHARSET
# LOCALE_CHARSET overrides CHARACTER_SET if true, using the current locale to
# lookup a MIME name that corresponds, and use that as the display charset.
#
# It also modifies the default value for ASSUME_CHARSET; it does not override
# that setting.
#
# Note that while nl_langinfo(CODESET) itself is standardized, the return
# values and their relationship to the locale value is not.  GNU libiconv
# happens to give useful values, but other implementations are not guaranteed
# to do this.
#LOCALE_CHARSET:FALSE
LOCALE_CHARSET:TRUE
.h2 HTML5_CHARSETS
# HTML5_CHARSETS is an alternative to ASSUME_CHARSET and ASSUME_LOCAL_CHARSET.
# Those assume by default that the character set of an HTML document is (as is
# standard in HTML4) ISO-8859-1, in the absence of locale information.
#
# HTML5 introduces a "compatibility" (sic) feature which assumes that the
# default is Windows 1252.  In the same way, it equates ISO-8859-4 and Windows
# 1254.  Finally, it also makes recommendations which selectively reinterpret
# the locale encoding.
#
# This option currently implements only the equating of ISO-8859-1 and Windows
# 1252.
#
#HTML5_CHARSETS:FALSE
.h2 ASSUME_CHARSET
# ASSUME_CHARSET changes the handling of documents which do not
# explicitly specify a charset.  Normally Lynx assumes that 8-bit
# characters in those documents are encoded according to iso-8859-1
# (the official default for the HTTP protocol).  When ASSUME_CHARSET
# is defined here or by an -assume_charset command line flag is in effect,
# Lynx will treat documents as if they were encoded accordingly.
# See above on how this interacts with "raw mode" and the Display
# Character Set.
# ASSUME_CHARSET can also be changed via the 'o'ptions menu but will
# not be saved as permanent value in user's .lynxrc file to avoid more chaos.
#
#ASSUME_CHARSET:iso-8859-1
.h2 ASSUMED_DOC_CHARSET_CHOICE
.h2 DISPLAY_CHARSET_CHOICE
# It is possible to reduce the number of charset choices in the 'O'ptions menu
# for "display charset" and "assumed document charset" fields via
# DISPLAY_CHARSET_CHOICE and ASSUMED_DOC_CHARSET_CHOICE settings correspondingly.
# Each of these settings can be used several times to define the set of possible
# choices for corresponding field. The syntax for the values is
#
#	string | prefix* | *
#
# where
#
#	'string' is either the MIME name of charset or it's full name (listed
#		either in the left or in the right column of table of
#		recognized charsets), case-insensitive - e.g.  'Koi8-R' or
#		'Cyrillic (KOI8-R)' (both without quotes),
#
#	'prefix' is any string, and such value will select all charsets having
#		the name with prefix matching given (case insensitive), i.e.,
#		for the charsets listed in the table of recognized charsets,
#
.ex
# ASSUMED_DOC_CHARSET_CHOICE:cyrillic*
#		will be equal to specifying
.ex 4
# ASSUMED_DOC_CHARSET_CHOICE:cp866
# ASSUMED_DOC_CHARSET_CHOICE:windows-1251
# ASSUMED_DOC_CHARSET_CHOICE:koi8-r
# ASSUMED_DOC_CHARSET_CHOICE:iso-8859-5
#		or lines with full names of charsets.
#
#	literal string '*' (without quotes) will enable all charset choices
#		in corresponding field.  This is useful for overriding site
#		defaults in private pieces of lynx.cfg included via INCLUDE
#		directive.
#
# Default values for both settings are '*', but any occurrence of settings
# with values that denote any charsets will make only listed choices available
# for corresponding field.
#ASSUMED_DOC_CHARSET_CHOICE:*
#DISPLAY_CHARSET_CHOICE:*
.h2 ASSUME_LOCAL_CHARSET
# ASSUME_LOCAL_CHARSET is like ASSUME_CHARSET but only applies to local
# files.  If no setting is given here or by an -assume_local_charset
# command line option, the value for ASSUME_CHARSET or -assume_charset
# is used.  It works for both text/plain and text/html files.
# This option will ignore "raw mode" toggling when local files are viewed
# (it is "stronger" than "assume_charset" or the effective change
# of the charset assumption caused by changing "raw mode"),
# so only use when necessary.
#
#ASSUME_LOCAL_CHARSET:iso-8859-1
.h2 PREPEND_CHARSET_TO_SOURCE
# PREPEND_CHARSET_TO_SOURCE:TRUE tells Lynx to prepend a META CHARSET line
# to text/html source files when they are retrieved for 'd'ownloading
# or passed to 'p'rint functions, so HTTP headers will not be lost.
# This is necessary for resolving charset for local html files,
# while the assume_local_charset is just an assumption.
# For the 'd'ownload option, a META CHARSET will be added only if the HTTP
# charset is present.  The compilation default is TRUE.
# It is generally desirable to have charset information for every local
# html file, but META CHARSET string potentially could cause
# compatibility problems with other browsers, see also PREPEND_BASE_TO_SOURCE.
# Note that the prepending is not done for -source dumps.
#
PREPEND_CHARSET_TO_SOURCE:FALSE
.h2 NCR_IN_BOOKMARKS
# NCR_IN_BOOKMARKS:TRUE allows you to save 8-bit characters in bookmark titles
# in the unicode format (NCR).  This may be useful if you need to switch
# display charsets frequently.  This is the case when you use Lynx on different
# platforms, e.g., on UNIX and from a remote PC, and want to keep the bookmarks
# file persistent.
# Another aspect is compatibility:  NCR is part of I18N and HTML4.0
# specifications supported starting with Lynx 2.7.2, Netscape 4.0 and MSIE 4.0.
# Older browser versions will fail so keep NCR_IN_BOOKMARKS:FALSE if you
# plan to use them.
#
#NCR_IN_BOOKMARKS:FALSE
.h2 FORCE_8BIT_TOUPPER
# FORCE_8BIT_TOUPPER overrides locale settings and uses internal 8-bit
# case-conversion mechanism for case-insensitive searches in non-ASCII display
# character sets.  It is FALSE by default and should not be changed unless
# you encounter problems with case-insensitive searches.
#
#FORCE_8BIT_TOUPPER:FALSE
.h2 OUTGOING_MAIL_CHARSET
# While Lynx supports different platforms and display character sets
# we need to limit the charset in outgoing mail to reduce
# trouble for remote recipients who may not recognize our charset.
# You may try US-ASCII as the safest value (7 bit), any other MIME name,
# or leave this field blank (default) to use the display character set.
# Charset translations currently are implemented for mail "subjects= " only.
#
#OUTGOING_MAIL_CHARSET:
.h2 ASSUME_UNREC_CHARSET
# If Lynx encounters a charset parameter it doesn't recognize, it will
# replace the value given by ASSUME_UNREC_CHARSET (or a corresponding
# -assume_unrec_charset command line option) for it.  This can be used
# to deal with charsets unknown to Lynx, if they are "sufficiently
# similar" to one that Lynx does know about, by forcing the same
# treatment.  There is no default, and you probably should leave this
# undefined unless necessary.
#
#ASSUME_UNREC_CHARSET:iso-8859-1
.h2 PREFERRED_LANGUAGE
# PREFERRED_LANGUAGE is the language in MIME notation (e.g., "en",
# "fr") which will be indicated by Lynx in its Accept-Language headers
# as the preferred language.  If available, the document will be
# transmitted in that language.  Users can override this setting via
# the 'o'ptions menu and save that preference in their RC file.
# This may be a comma-separated list of languages in decreasing preference.
#
PREFERRED_LANGUAGE:en
.h2 PREFERRED_CHARSET
# PREFERRED_CHARSET specifies the character set in MIME notation (e.g.,
# "ISO-8859-2", "ISO-8859-5") which Lynx will indicate you prefer in
# requests to http servers using an Accept-Charsets header.  Users can
# change it via the 'o'ptions menu and save that preference in their RC file.
# The value should NOT include "ISO-8859-1" or "US-ASCII",
# since those values are always assumed by default.
# If a file in that character set is available, the server will send it.
# If no Accept-Charset header is present, the default is that any
# character set is acceptable.  If an Accept-Charset header is present,
# and if the server cannot send a response which is acceptable
# according to the Accept-Charset header, then the server SHOULD send
# an error response with the 406 (not acceptable) status code, though
# the sending of an unacceptable response is also allowed.  See RFC 2068
.url http://tools.ietf.org/html/rfc2068
#
#PREFERRED_CHARSET:
.h2 CHARSETS_DIRECTORY
# CHARSETS_DIRECTORY specifies the directory with the fonts (glyph data)
# used by Lynx to switch the display-font to a font best suited for the
# given document.  The font should be in a format understood by the
# platforms TTY-display-font-switching API.  Currently supported on OS/2 only.
#
# Lynx expects the glyphs for the charset CHARSET with character cell
# size HHHxWWW to be stored in a file HHHxWWW/CHARSET.fnt inside the directory
# specified by CHARSETS_DIRECTORY.  E.g., the font for koi8-r sized 14x9
# should be in the file 14x9/koi8-r.fnt.
#
#CHARSETS_DIRECTORY:
.h2 CHARSET_SWITCH_RULES
# CHARSET_SWITCH_RULES hints lynx on how to choose the best display font given
# the document encoding.  This string is a sequence of chunks, each chunk
# having the following form:
#
# IN_CHARSET1 IN_CHARSET2 ... IN_CHARSET5 :OUT_CHARSET
#
# For readability, one may insert arbitrary additional punctuation (anything
# but : is ignored).  E.g., if lynx is able to switch only to display charsets
# cp866, cp850, cp852, and cp862, then the following setting may be useful
# (split for readability):
#
# CHARSET_SWITCH_RULES: koi8-r ISO-8859-5 windows-1251 cp866u KOI8-U :cp866,
#	iso-8859-1 windows-1252 ISO-8859-15 :cp850,
#	ISO-8859-2 windows-1250 :cp852,
#	ISO-8859-8 windows-1255 :cp862
#
#CHARSET_SWITCH_RULES:
.h1 Interaction
.h2 URL_DOMAIN_PREFIXES
.h2 URL_DOMAIN_SUFFIXES
# URL_DOMAIN_PREFIXES and URL_DOMAIN_SUFFIXES are strings which will be
# prepended (together with a scheme://) and appended to the first element
# of command line or 'g'oto arguments which are not complete URLs and
# cannot be opened as a local file (file://localhost/string).  Both
# can be comma-separated lists.  Each prefix must end with a dot, each
# suffix must begin with a dot, and either may contain other dots (e.g.,
# .com.jp).  The default lists are defined in userdefs.h and can be
# replaced here.  Each prefix will be used with each suffix, in order,
# until a valid Internet host is created, based on a successful DNS
# lookup (e.g., foo will be tested as www.foo.com and then www.foo.edu
# etc.).  The first element can include a :port and/or /path which will
# be restored with the expanded host (e.g., wfbr:8002/dir/lynx will
# become http://www.wfbr.edu:8002/dir/lynx).  The prefixes will not be
# used if the first element ends in a dot (or has a dot before the
# :port or /path), and similarly the suffixes will not be used if the
# the first element begins with a dot (e.g., .nyu.edu will become
# http://www.nyu.edu without testing www.nyu.com).  Lynx will try to
# guess the scheme based on the first field of the expanded host name,
# and use "http://" as the default (e.g., gopher.wfbr.edu or gopher.wfbr.
# will be made gopher://gopher.wfbr.edu).
#
#URL_DOMAIN_PREFIXES:www.
#URL_DOMAIN_SUFFIXES:.com,.edu,.net,.org
.h2 FORMS_OPTIONS
# Toggle whether the Options Menu is key-based or form-based;
# the key-based version is available only if specified at compile time.
#FORMS_OPTIONS:TRUE
.h2 PARTIAL
# Display partial pages while downloading
#PARTIAL:TRUE
.h2 PARTIAL_THRES
# Set the threshold # of lines Lynx must render before it
# redraws the screen in PARTIAL mode.  Anything < 0 implies
# use of the screen size.
#PARTIAL_THRES:-1
.h2 SHOW_KB_RATE
# While getting large files, Lynx shows the approximate rate of transfer.
# Set this to change the units shown.  "Kilobytes" denotes 1024 bytes:
#	NONE to disable the display of transfer rate altogether.
#	TRUE or KB for Kilobytes/second.
#	FALSE or BYTES for bytes/second.
#	KB,ETA to show Kilobytes/second with estimated completion time.
#	BYTES,ETA to show BYTES/second with estimated completion time.
#	KB2,ETA to show Kilobytes/second with estimated completion time using 2-digits.
#	BYTES2,ETA to show BYTES/second with estimated completion time using 2-digits.
# Note that the "ETA" values are available if USE_READPROGRESS was defined.
#SHOW_KB_RATE:TRUE
.h2 SHOW_KB_NAME
# Set the abbreviation for Kilobytes (1024).
# Quoting from
.url http://www.romulus2.com/articles/guides/misc/bitsbytes.shtml
# In December 1998, the International Electrotechnical Commission (IEC)
# approved a new IEC International Standard.  Instead of using the metric
# prefixes for multiples in binary code, the new IEC standard invented specific
# prefixes for binary multiples made up of only the first two letters of the
# metric prefixes and adding the first two letters of the word "binary".  Thus,
# for instance, instead of Kilobyte (KB) or Gigabyte (GB), the new terms would
# be kibibyte (KiB) or gibibyte (GiB).
#
# If you prefer using the conventional (and more common) "KB", modify this
# setting.
#SHOW_KB_NAME:KiB
.h1 Timeouts
.h2 INFOSECS
.h2 MESSAGESECS
.h2 ALERTSECS
.h2 NO_PAUSE
# The following definitions set the number of seconds for
# pauses following statusline messages that would otherwise be
# replaced immediately, and are more important than the unpaused
# progress messages.  Those set by INFOSECS are also basically
# progress messages (e.g., that a prompted input has been canceled)
# and should have the shortest pause.  Those set by MESSAGESECS are
# informational (e.g., that a function is disabled) and should have
# a pause of intermediate duration.  Those set by ALERTSECS typically
# report a serious problem and should be paused long enough to read
# whenever they appear (typically unexpectedly).  The default values
# are defined in userdefs.h, and can be modified here should longer
# pauses be desired for braille-based access to Lynx.
#
# SVr4-curses implementations support time delays in milliseconds,
# hence the value may be given shorter, e.g., 0.5
#
# Use the NO_PAUSE option (like the command-line -nopause) to override
# all of the delay times.
#
#INFOSECS:1
#MESSAGESECS:2
#ALERTSECS:3
#NO_PAUSE:FALSE
.h2 DEBUGSECS
# Set DEBUGSECS to a nonzero value to slow down progress messages
# (see "-delay" option).
#DEBUGSECS:0
.h2 REPLAYSECS
# Set REPLAYSECS to a nonzero value to allow for slow replaying of
# command scripts (see "-cmd_script" option).
#REPLAYSECS:0
.h1 Appearance
# These settings control the appearance of Lynx's screen and the way
# Lynx renders some tags.
.h2 USE_SELECT_POPUPS
# If USE_SELECT_POPUPS is set FALSE, Lynx will present a vertical list of
# radio buttons for the OPTIONs in SELECT blocks which lack the MULTIPLE
# attribute, instead of using a popup menu.  Note that if the MULTIPLE
# attribute is present in the SELECT start tag, Lynx always will create a
# vertical list of checkboxes for the OPTIONs.
# The default defined here or in userdefs.h can be changed via the 'o'ptions
# menu and saved in the RC file, and always can be toggled via the -popup
# command line switch.
#
#USE_SELECT_POPUPS:TRUE
.h2 SHOW_CURSOR
# SHOW_CURSOR controls whether or not the cursor is hidden or appears
# over the current link in documents or the current option in popups.
# Showing the cursor is handy if you are a sighted user with a poor
# terminal that can't do bold and reverse video at the same time or
# at all.  It also can be useful to blind users, as an alternative
# or supplement to setting LINKS_AND_FIELDS_ARE_NUMBERED or
# LINKS_ARE_NUMBERED.
# The default defined here or in userdefs.h can be changed via the
# 'o'ptions menu and saved in the RC file, and always can be toggled
# via the -show_cursor command line switch.
#
SHOW_CURSOR:TRUE
.h2 UNDERLINE_LINKS
# UNDERLINE_LINKS controls whether links are underlined by default, or shown
# in bold.  Normally this default is set from the configure script.
#
#UNDERLINE_LINKS:FALSE
.h2 BOLD_HEADERS
# If BOLD_HEADERS is set to TRUE the HT_BOLD default style will be acted
# upon for <H1> through <H6> headers.  The compilation default is FALSE
# (only the indentation styles are acted upon, but see BOLD_H1, below).
# On Unix, compilation with -DUNDERLINE_LINKS also will apply to the
# HT_BOLD style for headers when BOLD_HEADERS is TRUE.
#
#BOLD_HEADERS:FALSE
.h2 BOLD_H1
# If BOLD_H1 is set to TRUE the HT_BOLD default style will be acted
# upon for <H1> headers even if BOLD_HEADERS is FALSE.  The compilation
# default is FALSE.  On Unix, compilation with -DUNDERLINE_LINKS also
# will apply to the HT_BOLD style for headers when BOLD_H1 is TRUE.
#
#BOLD_H1:FALSE
.h2 BOLD_NAME_ANCHORS
# If BOLD_NAME_ANCHORS is set to TRUE the content of anchors without
# an HREF attribute, (i.e., anchors with a NAME or ID attribute) will
# have the HT_BOLD default style.  The compilation default is FALSE.
# On Unix, compilation with -DUNDERLINE_LINKS also will apply to the
# HT_BOLD style for NAME (ID) anchors when BOLD_NAME_ANCHORS is TRUE.
#
#BOLD_NAME_ANCHORS:FALSE
.h1 Internal Behavior
.h2 DEFAULT_CACHE_SIZE
.h2 DEFAULT_VIRTUAL_MEMORY_SIZE
# The DEFAULT_CACHE_SIZE specifies the number of WWW documents to be
# cached in memory at one time.
#
# This so-called cache size (actually, number) is defined in userdefs.h and
# may be modified here and/or with the command line argument -cache=NUMBER
# The minimum allowed value is 2, for the current document and at least one
# to fetch, and there is no absolute maximum number of cached documents.
# On Unix, and VMS not compiled with VAXC, whenever the number is exceeded
# the least recently displayed document will be removed from memory.
#
# On VMS compiled with VAXC, the DEFAULT_VIRTUAL_MEMORY_SIZE specifies the
# amount (bytes) of virtual memory that can be allocated and not yet be freed
# before previous documents are removed from memory.  If the values for both
# the DEFAULT_CACHE_SIZE and DEFAULT_VIRTUAL_MEMORY_SIZE are exceeded, then
# the least recently displayed documents will be freed until one or the other
# value is no longer exceeded.  The default value is defined in userdefs.h.
#
# The Unix and VMS (but not VAXC) implementations use the C library malloc's
# and calloc's for memory allocation, but procedures for taking the actual
# amount of cache into account still need to be developed.  They use only
# the DEFAULT_CACHE_SIZE value, and that specifies the absolute maximum
# number of documents to cache (rather than the maximum number only if
# DEFAULT_VIRTUAL_MEMORY_SIZE has been exceeded, as with VAXC/VAX).
#
#DEFAULT_CACHE_SIZE:10
#DEFAULT_VIRTUAL_MEMORY_SIZE:512000
.h2 SOURCE_CACHE
# SOURCE_CACHE sets the source caching behavior for Lynx:
#
# FILE causes Lynx to keep a temporary file for each cached document
#   containing the HTML source of the document, which it uses to regenerate
#   the document when certain settings are changed (for instance,
#   historical vs. minimal vs. valid comment parsing) instead of reloading
#   the source from the network.
#
# MEMORY is like FILE, except the document source is kept in memory.  You
#   may wish to adjust DEFAULT_CACHE_SIZE and DEFAULT_VIRTUAL_MEMORY_SIZE
#   accordingly.
#
# NONE is the default; the document source is not cached, and is reloaded
#   from the network when needed.
#
#SOURCE_CACHE:NONE
.h2 SOURCE_CACHE_FOR_ABORTED
# This setting controls what will happen with cached source for the document
# being fetched from the net if fetching was aborted (either user pressed
# 'z' or network went down). If set to KEEP, the source fetched so far will
# be preserved (and used as cache), if set to DROP lynx will drop the
# source cache for that document (i.e. only completely downloaded documents
# will be cached in that case).
#SOURCE_CACHE_FOR_ABORTED:DROP
.h2 ALWAYS_RESUBMIT_POSTS
# If ALWAYS_RESUBMIT_POSTS is set TRUE, Lynx always will resubmit forms
# with method POST, dumping any cache from a previous submission of the
# form, including when the document returned by that form is sought with
# the PREV_DOC command or via the history list.  Lynx always resubmits
# forms with method POST when a submit button or a submitting text input
# is activated, but normally retrieves the previously returned document
# if it had links which you activated, and then go back with the PREV_DOC
# command or via the history list.
#
# The default defined here or in userdefs.h can be toggled via
# the -resubmit_forms command line switch.
#
#ALWAYS_RESUBMIT_POSTS:FALSE
.h2 TRIM_INPUT_FIELDS
# If TRIM_INPUT_FIELDS is set TRUE, Lynx will trim trailing whitespace (e.g.,
# space, tab, carriage return, line feed and form feed) from the text entered
# into form text and textarea fields.  Older versions of Lynx do this trimming
# unconditionally, but other browsers do not, which would yield different
# behavior for CGI scripts.
#TRIM_INPUT_FIELDS:FALSE
.h1 HTML Parsing
.h2 NO_ISMAP_IF_USEMAP
# If NO_ISMAP_IF_USEMAP is set TRUE, Lynx will not include a link to the
# server-side image map if both a server-side and client-side map for the
# same image is indicated in the HTML markup.  The compilation default is
# FALSE, such that a link with "[ISMAP]" as the link name, followed by a
# hyphen, will be prepended to the ALT string or "[USEMAP]" pseudo-ALT for
# accessing Lynx's text-based rendition of the client-side map (based on
# the content of the associated MAP element).  If the "[ISMAP]" link is
# activated, Lynx will send a 0,0 coordinate pair to the server, which
# Lynx-friendly sites can map to a for-text-client document, homologous
# to what is intended for the content of a FIG element.
#
# The compilation default, or default defined here, can be toggled via
# the "-ismap" command line switch.
#
#NO_ISMAP_IF_USEMAP:FALSE
.h2 SEEK_FRAG_MAP_IN_CUR
# If SEEK_FRAG_MAP_IN_CUR is set FALSE, then USEMAP attribute values
# (in IMG or OBJECT tags) consisting of only a fragment (USEMAP="#foo")
# will be resolved with respect to the current document's base, which
# might not be the same as the current document's URL.
# The compilation default is to use the current document's URL in all
# cases (i.e., assume the MAP is present below, if it wasn't present
# above the point in the HTML stream where the USEMAP attribute was
# detected).  Lynx's present "single pass" rendering engine precludes
# checking below before making the decision on how to resolve a USEMAP
# reference consisting solely of a fragment.
#
#SEEK_FRAG_MAP_IN_CUR:TRUE
.h2 SEEK_FRAG_AREA_IN_CUR
# If SEEK_FRAG_AREA_IN_CUR is set FALSE, then HREF attribute values
# in AREA tags consisting of only a fragment (HREF="#foo") will be
# resolved with respect to the current document's base, which might
# not be the same as the current document's URL.  The compilation
# default is to use the current document's URL, as is done for the
# HREF attribute values of Anchors and LINKs that consist solely of
# a fragment.
#
#SEEK_FRAG_AREA_IN_CUR:TRUE
.h1 CGI scripts
# These settings control Lynx's ability to execute various types of scripts.
.h2 LOCAL_EXECUTION_LINKS_ALWAYS_ON
.h2 LOCAL_EXECUTION_LINKS_ON_BUT_NOT_REMOTE
# Local execution links and scripts are by default completely disabled,
# unless a change is made to the userdefs.h file to enable them or
# the configure script is used with the corresponding options
# (-enable-exec-links and -enable-exec-scripts).
# See the Lynx source code distribution and the userdefs.h
# file for more detail on enabling execution links and scripts.
#
# If you have enabled execution links or scripts the following
# two variables control Lynx's action when an execution link
# or script is encountered.
#
# If LOCAL_EXECUTION_LINKS_ALWAYS_ON is set to TRUE any execution
# link or script will be executed no matter where it came from.
# This is EXTREMELY dangerous.  Since Lynx can access files from
# anywhere in the world, you may encounter links or scripts that
# will cause damage or compromise the security of your system.
#
# If LOCAL_EXECUTION_LINKS_ON_BUT_NOT_REMOTE is set to TRUE only
# links or scripts that reside on the local machine and are
# referenced with a URL beginning with "file://localhost/" or meet
# TRUSTED_EXEC or ALWAYS_TRUSTED_EXEC rules (see below) will be
# executed.  This is much less dangerous than enabling all execution
# links, but can still be dangerous.
#
LOCAL_EXECUTION_LINKS_ALWAYS_ON:FALSE
LOCAL_EXECUTION_LINKS_ON_BUT_NOT_REMOTE:FALSE
.h2 TRUSTED_EXEC
# If LOCAL_EXECUTION_LINK_ON_BUT_NOT_REMOTE is TRUE, and no TRUSTED_EXEC
# rule is defined, it defaults to "file://localhost/" and any lynxexec
# or lynxprog command will be permitted if it was referenced from within
# a document whose URL begins with that string.  If you wish to restrict the
# referencing URLs further, you can extend the string to include a trusted
# path.  You also can specify a trusted directory for http URLs, which will
# then be treated as if they were local rather than remote.  For example:
#
#	TRUSTED_EXEC:file://localhost/trusted/
#	TRUSTED_EXEC:http://www.wfbr.edu/trusted/
#
# If you also wish to restrict the commands which can be executed, create
# a series of rules with the path (Unix) or command name (VMS) following
# the string, separated by a tab.  For example:
#
# Unix:
# ====
#	TRUSTED_EXEC:file://localhost/<tab>/bin/cp
#	TRUSTED_EXEC:file://localhost/<tab>/bin/rm
# VMS:
# ===
#	TRUSTED_EXEC:file://localhost/<tab>copy
#	TRUSTED_EXEC:file://localhost/<tab>delete
#
# Once you specify a TRUSTED_EXEC referencing string, the default is
# replaced, and all the referencing strings you desire must be specified
# as a series.  Similarly, if you associate a command with the referencing
# string, you must specify all of the allowable commands as a series of
# TRUSTED_EXEC rules for that string.  If you specify ALWAYS_TRUSTED_EXEC
# rules below, you need not repeat them as TRUSTED_EXEC rules.
#
# If EXEC_LINKS and JUMPFILE have been defined, any lynxexec or lynxprog
# URLs in that file will be permitted, regardless of other settings.  If
# you also set LOCAL_EXECUTION_LINKS_ON_BUT_NOT_REMOTE:TRUE and a single
# TRUSTED_EXEC rule that will always fail (e.g., "none"), then *ONLY* the
# lynxexec or lynxprog URLs in JUMPFILE (and any ALWAYS_TRUSTED_EXEC rules,
# see below) will be allowed.  Note, however, that if Lynx was compiled with
# CAN_ANONYMOUS_JUMP set to FALSE (default is TRUE), or -restrictions=jump
# is included with the -anonymous switch at run time, then users of an
# anonymous account will not be able to access the jumps file or enter
# 'j'ump shortcuts, and this selective execution feature will be overridden
# as well (i.e., they will only be able to access lynxexec or lynxprog
# URLs which meet any ALWAYS_TRUSTED_EXEC rules).
#
TRUSTED_EXEC:none
.h2 ALWAYS_TRUSTED_EXEC
# If EXEC_LINKS was defined, any lynxexec or lynxprog URL can be made
# always enabled by an ALWAYS_TRUSTED_EXEC rule for it.  This is useful for
# anonymous accounts in which you have disabled execution links generally,
# and may also have disabled jumps file links, but still want to allow
# execution of particular utility scripts or programs.  The format is
# like that for TRUSTED_EXEC.  For example:
#
# Unix:
# ====
#   ALWAYS_TRUSTED_EXEC:file://localhost/<tab>/usr/local/kinetic/bin/usertime
#   ALWAYS_TRUSTED_EXEC:http://www.more.net/<tab>/usr/local/kinetic/bin/who.sh
# VMS:
# ===
#   ALWAYS_TRUSTED_EXEC:file://localhost/<tab>usertime
#   ALWAYS_TRUSTED_EXEC:http://www.more.net/<tab>show users
#
# The default ALWAYS_TRUSTED_EXEC rule is "none".
#
ALWAYS_TRUSTED_EXEC:none
.h2 TRUSTED_LYNXCGI
# Unix:
# =====
# TRUSTED_LYNXCGI rules define the permitted sources and/or paths for
# lynxcgi links (if LYNXCGI_LINKS is defined in userdefs.h).  The format
# is the same as for TRUSTED_EXEC rules (see above).  Example rules:
#
#	TRUSTED_LYNXCGI:file://localhost/
#	TRUSTED_LYNXCGI:<tab>/usr/local/etc/httpd/cgi-bin/
#	TRUSTED_LYNXCGI:file://localhost/<tab>/usr/local/www/cgi-bin/
#
# VMS:
# ====
# Do not define this.
#
# The default TRUSTED_LYNXCGI rule is "none".
#
TRUSTED_LYNXCGI:none
.h2 LYNXCGI_ENVIRONMENT
# Unix:
# =====
# LYNXCGI_ENVIRONMENT adds the current value of the specified
# environment variable to the list of environment variables passed on to the
# lynxcgi script.  Useful variables are HOME, USER, etc...  If proxies
# are in use, and the script invokes another copy of lynx (or a program like
# wget) in a subsidiary role, it can be useful to add http_proxy and other
# *_proxy variables.
#
# VMS:
# ====
# Do not define this.
#
#LYNXCGI_ENVIRONMENT:
.h2 LYNXCGI_DOCUMENT_ROOT
# Unix:
# =====
# LYNXCGI_DOCUMENT_ROOT is the value of DOCUMENT_ROOT that will be passed
# to lynxcgi scripts.  If set and the URL has PATH_INFO data, then
# PATH_TRANSLATED will also be generated.  Examples:
#	LYNXCGI_DOCUMENT_ROOT:/usr/local/etc/httpd/htdocs
#	LYNXCGI_DOCUMENT_ROOT:/data/htdocs/
#
# VMS:
# ====
# Do not define this.
#
#LYNXCGI_DOCUMENT_ROOT:
.h1 Cookies
.h2 FORCE_SSL_COOKIES_SECURE
# If FORCE_SSL_COOKIES_SECURE is set to TRUE, then SSL encrypted cookies
# received from https servers never will be sent unencrypted to http
# servers.  The compilation default is to impose this block only if the
# https server included a secure attribute for the cookie.  The normal
# default or that defined here can be toggled via the -force_secure
# command line switch.
#
#FORCE_SSL_COOKIES_SECURE:FALSE
.h1 Internal Behavior
.h2 MAIL_SYSTEM_ERROR_LOGGING
#  MAIL_SYSTEM_ERROR_LOGGING will send a message to the owner of
#  the information, or ALERTMAIL if there is no owner, every time
#  that a document cannot be accessed!
#
#  NOTE:  This can generate A LOT of mail, be warned.
#
#MAIL_SYSTEM_ERROR_LOGGING:FALSE
.h2 CHECKMAIL
# If CHECKMAIL is set to TRUE, the user will be informed (via a statusline
# message) about the existence of any unread mail at startup of Lynx, and
# will get statusline messages if subsequent new mail arrives.  If a jumps
# file with a lynxprog URL for invoking mail is available, or your html
# pages include an mail launch file URL, the user thereby can access mail
# and read the messages.  The checks and statusline reports will not be
# performed if Lynx has been invoked with the -restrictions=mail switch.
#
# VMS USERS !!!
# =============
# New mail is normally broadcast as it arrives, via "unsolicited screen
# broadcasts", which can be "wiped" from the Lynx display via the Ctrl-W
# command.  You may prefer to disable the broadcasts and use CHECKMAIL
# instead (e.g., in a public account which will be used by people who
# are ignorant about VMS).
#
#CHECKMAIL:FALSE
.h1 News-groups
.h2 NNTPSERVER
# To enable news reading ability via Lynx, the environment variable NNTPSERVER
# must be set so that it points to your site's NNTP server
# (see Lynx Users Guide on environment variables).
# Lynx respects RFC 1738
.url http://tools.ietf.org/html/rfc1738
# and does not accept a host field in news URLs (use nntp: instead of news: for
# the scheme if you wish to specify an NNTP host in a URL, as explained in the
# RFC).  If you have not set the variable externally, you can set it at run
# time via this configuration file.  It will not override an external setting.
# Note that on VMS it is set as a process logical rather than symbol, and will
# outlive the Lynx image.
# The news reading facility in Lynx is quite limited.  Lynx does not provide a
# full featured news reader with elaborate error checking and safety features.
#
#NNTPSERVER:news.server.dom
.h2 LIST_NEWS_NUMBERS
# If LIST_NEWS_NUMBERS is set TRUE, Lynx will use an ordered list and include
# the numbers of articles in news listings, instead of using an unordered
# list.  The default is defined in userdefs.h, and can be overridden here.
#
#LIST_NEWS_NUMBERS:FALSE
.h2 LIST_NEWS_DATES
# If LIST_NEWS_DATES is set TRUE, Lynx will include the dates of articles in
# news listings.  The dates always are included in the articles, themselves.
# The default is defined in userdefs.h, and can be overridden here.
#
#LIST_NEWS_DATES:FALSE
.h2 NEWS_CHUNK_SIZE
.h2 NEWS_MAX_CHUNK
# NEWS_CHUNK_SIZE and NEWS_MAX_CHUNK regulate the chunking of news article
# listings with inclusion of links for listing earlier and/or later articles.
# The defaults are defined in HTNews.c as 30 and 40, respectively.  If the
# news group contains more than NEWS_MAX_CHUNK articles, they will be listed
# in NEWS_CHUNK_SIZE chunks.  You can change the defaults here, and/or on
# the command line via -newschunksize=NUMBER and/or -newsmaxchunk=NUMBER
# switches.  Note that if the chunk size is increased, here or on the command
# line, to a value greater than the current maximum, the maximum will be
# increased to that number.  Conversely, if the maximum is set to a number
# less than the current chunk size, the chunk size will be reduced to that
# number.  Thus, you need use only one of the two switches on the command
# line, based on the direction of intended change relative to the compilation
# or configuration defaults.  The compilation defaults ensure that there will
# be at least 10 earlier articles before bothering to chunk and create a link
# for earlier articles.
#
#NEWS_CHUNK_SIZE:30
#NEWS_MAX_CHUNK:40
.h2 NEWS_POSTING
# Set NEWS_POSTING to FALSE if you do not want to support posting to
# news groups via Lynx.  If left TRUE, Lynx will use its news gateway to
# post new messages or followups to news groups, using the URL schemes
# described in the "Supported URLs" section of the online 'h'elp.  The
# posts will be attempted via the nntp server specified in the URL, or
# if none was specified, via the NNTPSERVER configuration or environment
# variable.  Links with these URLs for posting or sending followups are
# created by the news gateway when reading group listings or articles
# from nntp servers if the server indicates that it permits posting.
# The compilation default set in userdefs.h can be changed here.  If
# the default is TRUE, posting can still be disallowed via the
# -restrictions command line switch.
# The posting facility in Lynx is quite limited.  Lynx does not provide a
# full featured news poster with elaborate error checking and safety features.
#
#NEWS_POSTING:TRUE
.h2 LYNX_SIG_FILE
# LYNX_SIG_FILE defines the name of a file containing a signature which
# can be appended to email messages and news postings or followups.  The
# user will be prompted whether to append it.  It is sought in the home
# directory.  If it is in a subdirectory, begin it with a dot-slash
# (e.g., ./lynx/.lynxsig).  The definition is set in userdefs.h and can
# be changed here.
#
#LYNX_SIG_FILE:.lynxsig
.h1 Bibliographic Protocol (bibp scheme)
.h2 BIBP_GLOBAL_SERVER
# BIBP_GLOBAL_SERVER is the default global server for bibp: links, used
# when a local bibhost or document-specified citehost is unavailable.
# Set in userdefs.h and can be changed here.
#BIBP_GLOBAL_SERVER:http://usin.org/
.h2 BIBP_BIBHOST
# BIBP_BIBHOST is the URL at which local bibp service may be found, if
# it exists.   Defaults to http://bibhost/ for protocol conformance, but
# may be overridden here or via -bibhost parameter.
#BIBP_BIBHOST:http://bibhost/
.h1 Interaction
# These settings control interaction of the user with lynx.
.h2 SCROLLBAR
# If SCROLLBAR is set TRUE, Lynx will show scrollbar on windows.  With mouse
# enabled, the scrollbar strip outside the bar is clickable, and scrolls the
# window by pages.  The appearance of the scrollbar can be changed from
# LYNX_LSS file:  define attributes scroll.bar, scroll.back (for the bar, and
# for the strip along which the scrollbar moves).
#SCROLLBAR:FALSE
.h2 SCROLLBAR_ARROW
# If SCROLLBAR_ARROW is set TRUE, Lynx's scrollbar will have arrows at the
# ends.  With mouse enabled, the arrows are clickable, and scroll the window by
# 2 lines.  The appearance of the scrollbar arrows can be changed from LYNX_LSS
# file:  define attributes scroll.arrow, scroll.noarrow (for enabled-arrows,
# and disabled arrows).  An arrow is "disabled" if the bar is at this end of
# the strip.
#SCROLLBAR_ARROW:TRUE
.h2 USE_MOUSE
# If Lynx is configured with ncurses, PDcurses or slang & USE_MOUSE is TRUE,
# users can perform commands by left-clicking certain parts of the screen:
#   on a link = `g'oto + ACTIVATE (i.e., move highlight & follow the link);
#   on the top/bottom lines = PREV/NEXT_PAGE (i.e., go up/down 1 page);
#   on the top/bottom left corners = PREV/NEXT_DOC (i.e., go to the previous
#   document / undo goto previous document);
#   on the top/bottom right corners = HISTORY/VLINKS (i.e., call up the history
#   page or visited links page if on history page).
# NB if the mouse is defined in this way, it will not be available
# for copy/paste operations using the clipboard of a desktop manager:
# for flexibility instead, use the command-line switch  -use_mouse .
#
# ncurses and slang have built-in support for the xterm mouse protocol.  In
# addition, ncurses can be linked with the gpm mouse library, to automatically
# provide support for this interface in applications such as Lynx.  (Please
# read the ncurses faq to work around broken gpm configurations packaged by
# some distributors).  PDCurses implements mouse support for win32 console
# windows, as does slang.
#USE_MOUSE:FALSE
.h1 HTML Parsing
# These settings control the way Lynx parses invalid HTML
# and how it may resolve such issues.
.h2 COLLAPSE_BR_TAGS
# If COLLAPSE_BR_TAGS is set FALSE, Lynx will not collapse serial BR tags.
# If set TRUE, two or more concurrent BRs will be collapsed into a single
# line break.  Note that the valid way to insert extra blank lines in HTML
# is via a PRE block with only newlines in the block.
#
#COLLAPSE_BR_TAGS:TRUE
.h2 TRIM_BLANK_LINES
# If TRIM_BLANK_LINES is set FALSE, Lynx will not trim trailing blank lines
# from the document.  Also, Lynx will not collapse BR-tags onto the previous
# line when it happens to be empty.
#TRIM_BLANK_LINES:TRUE
.h2 TAGSOUP
# If TAGSOUP is set, Lynx uses the "Tag Soup DTD" rather than "SortaSGML".
# The two approaches differ by the style of error detection and recovery.
# Tag Soup DTD allows for improperly nested tags; SortaSGML is stricter.
#TAGSOUP:FALSE
.h1 Cookies
.h2 SET_COOKIES
# If SET_COOKIES is set FALSE, Lynx will ignore Set-Cookie headers
# in http server replies.  Note that if a COOKIE_FILE is in use (see
# below) that contains cookies at startup, Lynx will still send those
# persistent cookies in requests as appropriate.  Setting SET_COOKIES
# to FALSE just prevents accepting any new cookies from servers.  To
# prevent all cookie processing (sending *and* receiving) in a session,
# make sure that PERSISTENT_COOKIES is not TRUE or that COOKIE_FILE does
# not point to a file with cookies, in addition to setting SET_COOKIES
# to FALSE.
# The default is defined in userdefs.h, and can be overridden here,
# and/or toggled via the -cookies command line switch.
#
#SET_COOKIES:TRUE
.h2 ACCEPT_ALL_COOKIES
# If ACCEPT_ALL_COOKIES is set TRUE, Lynx will accept cookies from all
# domains with no user interaction.  This is equivalent to automatically
# replying to all cookie 'Allow?' prompts with 'A'lways.  Note that it
# does not preempt validity checking, which has to be controlled separately
# (see below).
# The default is defined in userdefs.h and can be overridden here, or
# in the .lynxrc file via an o(ptions) screen setting.  It may also be
# toggled via the -accept_all_cookies command line switch.
#
ACCEPT_ALL_COOKIES:TRUE
.h2 COOKIE_ACCEPT_DOMAINS
.h2 COOKIE_REJECT_DOMAINS
# COOKIE_ACCEPT_DOMAINS and COOKIE_REJECT_DOMAINS are comma-delimited lists
# of domains from which Lynx should automatically accept or reject cookies
# without asking for confirmation.  If the same domain is specified in both
# lists, rejection will take precedence.
# Note that in order to match cookies, domains have to be spelled out exactly
# in the form in which they would appear on the Cookie Jar page (case is
# insignificant).  They are not wildcards.  Domains that apply to more than
# one host have a leading '.', but have to match *the cookie's* domain
# exactly.
#
#COOKIE_ACCEPT_DOMAINS:
#COOKIE_REJECT_DOMAINS:
.h2 COOKIE_LOOSE_INVALID_DOMAINS
.h2 COOKIE_STRICT_INVALID_DOMAINS
.h2 COOKIE_QUERY_INVALID_DOMAINS
# COOKIE_LOOSE_INVALID_DOMAINS, COOKIE_STRICT_INVALID_DOMAINS, and
# COOKIE_QUERY_INVALID_DOMAINS are comma-delimited lists of domains.
# They control the degree of validity checking that is applied to cookies
# for the specified domains.
# Note that in order to match cookies, domains have to be spelled out exactly
# in the form in which they would appear on the Cookie Jar page (case is
# insignificant).  They are not wildcards.  Domains that apply to more than
# one host have a leading '.', but have to match *the cookie's* domain
# exactly.
# If a domain is set to strict checking, strict conformance to RFC 2109 will
# be applied.  A domain with loose checking will be allowed to set cookies
# with an invalid path or domain attribute.  All domains will default to
# asking the user for confirmation in case of an invalid path or domain.
# Cookie validity checking takes place as a separate step before the
# final decision to accept or reject (see previous options), therefore
# a cookie that passes validity checking may still be automatically
# rejected or cause another prompt.
#
#COOKIE_LOOSE_INVALID_DOMAINS:
#COOKIE_STRICT_INVALID_DOMAINS:
#COOKIE_QUERY_INVALID_DOMAINS:
.h2 MAX_COOKIES_DOMAIN
.h2 MAX_COOKIES_GLOBAL
.h2 MAX_COOKIES_BUFFER
# MAX_COOKIES_DOMAIN,
# MAX_COOKIES_GLOBAL and
# MAX_COOKIES_BUFFER are limits on the total number of cookies for each domain,
# globally, and the per-cookie buffer size.  These limits are by default large
# enough for reasonable usage; if they are very high, some sites may present
# undue performance waste.
#
#MAX_COOKIES_DOMAIN:50
#MAX_COOKIES_GLOBAL:500
#MAX_COOKIES_BUFFER:4096
.h2 PERSISTENT_COOKIES
# PERSISTENT_COOKIES indicates that cookies should be read at startup from
# the COOKIE_FILE, and saved at exit for storage between Lynx sessions.
# It is not used if Lynx was compiled without USE_PERSISTENT_COOKIES.
# The default is FALSE, so that the feature needs to be enabled here
# explicitly if you want it.
#
PERSISTENT_COOKIES:FALSE
.h2 COOKIE_FILE
# COOKIE_FILE is the default file from which persistent cookies are read
# at startup (if the file exists), if Lynx was compiled with
# USE_PERSISTENT_COOKIES and the PERSISTENT_COOKIES option is enabled.
# The cookie file can also be specified in .lynxrc or on the command line.
#
#COOKIE_FILE:~/.lynx_cookies
.h2 COOKIE_SAVE_FILE
# COOKIE_SAVE_FILE is the default file in which persistent cookies are
# stored at exit, if Lynx was compiled with USE_PERSISTENT_COOKIES and the
# PERSISTENT_COOKIES option is enabled.  The cookie save file can also be
# specified on the command line.
#
# With an interactive Lynx session, COOKIE_SAVE_FILE will default to
# COOKIE_FILE if it is not set.  With a non-interactive Lynx session (e.g.,
# -dump), cookies will only be saved to file if COOKIE_SAVE_FILE is set.
#
#COOKIE_SAVE_FILE:~/.lynx_cookies
.h1 Mail-related
.h2 SYSTEM_MAIL
.h2 SYSTEM_MAIL_FLAGS
# VMS:
# ===
# The mail command and qualifiers are defined in userdefs.h.  Lynx
# will spawn a subprocess to send replies and error messages.  The
# command, and qualifiers (if any), can be re-defined here.  If
# you use PMDF then headers will we passed via a header file.
# If you use "generic" VMS MAIL, the subject will be passed on the
# command line via a /subject="SUBJECT" qualifier, and inclusion
# of other relevant headers may not be possible.
# If your mailer uses another syntax, some hacking of the mailform()
# mailmsg() and reply_by_mail() functions in LYMail.c, and send_file_to_mail()
# function in LYPrint.c, may be required.
#
.ex 2
#SYSTEM_MAIL:PMDF SEND
#SYSTEM_MAIL_FLAGS:/headers
#
.ex 2
#SYSTEM_MAIL:MAIL
#SYSTEM_MAIL_FLAGS:
#
# Unix:
#======
# The mail path and flags normally are defined for sendmail (or submit
# with MMDF) in userdefs.h.  You can change them here, but should first
# read the zillions of CERT advisories about security problems with Unix
# mailers.
#
.ex 2
#SYSTEM_MAIL:/usr/mmdf/bin/submit
#SYSTEM_MAIL_FLAGS:-mlruxto,cc\*
#
.ex 2
#SYSTEM_MAIL:/usr/sbin/sendmail
#SYSTEM_MAIL_FLAGS:-t -oi
#
.ex 2
#SYSTEM_MAIL:/usr/lib/sendmail
#SYSTEM_MAIL_FLAGS:-t -oi
#
# Win32:
#=======
# The Win32 port assumes that the mailer cannot read via a pipe.  That is, it
# must read all information from files.  The "sendmail" utility in the 2.8.1
# release is able to work with that assumption.  There is no way to tell the
# Win32 port of Lynx to send its information to the sendmail utility via a
# pipe.
#
# Please read sendmail.txt in the LYNX_W32.ZIP distribution
.url	http://invisible-mirror.net/archives/lynx/tarballs/lynx2.8.1_w32.zip
.url	ftp://invisible-island.net/lynx/tarballs/lynx2.8.1_w32.zip
#
# As an alternative, the newer "sendmail for windows" may be useful:
.url	http://glob.com.au/sendmail/
#
# See also BLAT_MAIL and ALT_BLAT_MAIL flags.
#
#SYSTEM_MAIL:sendmail -f me@my.host -h my.host -r my.smtp.mailer -m SMTP
